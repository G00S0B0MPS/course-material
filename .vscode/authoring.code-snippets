{
    "Warning": {
        "prefix": "warning",
        "body": [
            "::::WARNING",
            "$1",
            "::::",
        ],
        "description": "Warning block",
        "scope": "markdown"
    },
    "Information": {
        "prefix": "info",
        "body": [
            "::::INFO",
            "$1",
            "::::",
        ],
        "description": "Info block",
        "scope": "markdown"
    },
    "Task": {
        "prefix": "task",
        "body": [
            "::::TASK",
            "$1",
            "::::",
        ],
        "description": "Task block",
        "scope": "markdown"
    },
    "Hint": {
        "prefix": "hint",
        "body": [
            "::::HINT",
            "$1",
            "::::",
        ],
        "description": "Hint block",
        "scope": "markdown"
    },
    "Question": {
        "prefix": "question",
        "body": [
            "::::QUESTION",
            "$1",
            "::::",
        ],
        "description": "Question block",
        "scope": "markdown"
    },
    "Important": {
        "prefix": "important",
        "body": [
            "::::IMPORTANT",
            "$1",
            "::::",
        ],
        "description": "Important block",
        "scope": "markdown"
    },
    "Usage": {
        "prefix": "usage",
        "body": [
            "::::USAGE",
            "",
            "```python",
            "$1",
            "```",
            "",
            "::::",
        ],
        "description": "Usage block",
        "scope": "markdown"
    },
    "Example": {
        "prefix": "example",
        "body": [
            "::::EXAMPLE",
            "$1",
            "::::",
        ],
        "description": "Example block",
        "scope": "markdown"
    },
    "Code Container": {
        "prefix": "ccode",
        "body": [
            ":::code{caption=\"Python\"}",
            "",
            "```python",
            "$1",
            "```",
            "",
            ":::",
        ],
        "description": "Example block",
        "scope": "markdown"
    },
    "exercise": {
        "prefix": "exercise",
        "body": [
            "- name: $1",
            "  type: exercise",
            "  id: $2",
            "  documentation:",
            "    en: assignment-$2.en.md",
            "  difficulty: 1",
            "  judge:",
            "    type: pytest",
            "    file: test-$2.py"
        ],
        "description": "Usage block",
        "scope": "yaml"
    },
    "explanation": {
        "prefix": "explanation",
        "body": [
            "- name: $1",
            "  type: explanation",
            "  id: $2",
            "  documentation:",
            "    en: explanation-$2.en.md",
        ],
        "description": "Usage block",
        "scope": "yaml"
    },
    "topics": {
        "prefix": "topics",
        "body": [
            "topics:",
            "  introduces: []",
            "  must_come_before: []",
            "  must_come_after: []",
        ],
        "description": "Usage block",
        "scope": "yaml"
    },
    "Test prelude": {
        "prefix": "testprelude",
        "body": [
            "import pytest",
            "import student",
            "",
            "",
            "$1"
        ],
        "description": "Test file prelude",
        "scope": "python"
    },
    "Parametrized test": {
        "prefix": "testparam",
        "body": [
            "@pytest.mark.timeout(1)",
            "@pytest.mark.parametrize(\"$2\", [",
            "])",
            "def test_$1($2):",
            "    $3"
        ],
        "description": "Parametrized test",
        "scope": "python"
    },
    "Readonly Property": {
        "prefix": "prop",
        "body": [
            "@property",
            "def $1(self):",
            "    return self.__$1",
        ],
        "description": "Description",
        "scope": "python"
    },
    "Read/Write Property": {
        "prefix": "propw",
        "body": [
            "@property",
            "def $1(self):",
            "    return self.__$1",
            "",
            "@$1.setter",
            "def $1(self, value):",
            "    self.__$1 = value"
        ],
        "description": "Description",
        "scope": "python"
    }
}
